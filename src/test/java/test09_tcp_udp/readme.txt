
## 网络协议的概念

	所谓协议，可以理解为一些规则，这些规则规定了两个需要连通的两点之间应当如何进行数据交互（可以用人类的语言作比较）。
	
	对于网络来说，有两种模型，一种是OSI七层模型，另一种是TCP/IP协议4层模型。
	OSI七层模型：是一种标准化的网络模型，然而这种模型设计过于理想化，并且有些层次分的过细，不实用。
	
	
	*****************************************************************
	
	应用层|
	表示层| ------------------> 应用层（数据段）------- FTP/HTTP/SSH等协议
	会话层|
	
	传输层|-------------------> 传输层（数据包）------- TCP/UDP协议
	网络层|-------------------> 网络互连层（数据帧）---- IP协议
	
	链路层|
	物理层|-------------------> 主机到网络层（比特）
	
	*****************************************************************
	
	对于IP层来说，在TCP/IP协议栈中，网络中某一台计算机的定位，靠的是IP地址这种方式。因此在TCP/IP模型中，
	把网络层也称之为IP层。如果那生活中的例子来比喻的话，那IP就可以当做是电话号码，通过电话号码能够唯一定
	位城市中的一台电话机。而传输层，则可以认为是相互沟通的基础。从技术上说，传输层决定了一个数据包是如何从
	一台电脑传输到另一台电脑。传输层有两个协议：TCP和UDP协议，这两个协议各有不同。TCP协议是一个有连接、
	可靠的协议；而UDP协议是一个无连接，不可靠的协议。关于这两个协议的使用，我们在后面的编程中会进一步详细
	阐述。如何使用传输层进行网络通信，这是我们的重点。
	
	应用层指的是应用程序使用底层的网络服务，典型的应用层协议包括ftp、http协议等。事实上，大部分Java开发
	者，绝大多数时间都在开发基于应用层的软件。而这一章介绍的内容，也许在你的Java程序员生涯中并不会经常接
	触。但是，掌握这些相对底层的技术，了解底层工作的原理，对以后理解Web编程是有非常大的帮助的。
	

## TCP协议
	
	a.这是传输层的协议，与UDP协议相比较，是有连接并且可靠的协议，它能够保证数据完整无误的传输
	b.有连接：指的是在进行TCP通信之前，需要通信的主机之间首先建立一条数据通道
	c.可靠：指的是TCP协议能够保证发送端发送的数据不会丢失，接收端按发送端发送的顺序进行接收数据
	d.IP地址/端口号：网络通信中，我们连接服务器时，往往不仅需要知道服务器的IP地址，还要知道服务
	  器的端口号。网络通信的本质就是“进程间通信”，比如两台电脑之间进行QQ聊天，本质上是两台电脑的
	  qq进程进行相互通信。每个进程都会绑定主机中的一个端口号。通过IP地址和端口号就可以进行进程间
	  的通信了。可以这么来理解端口号：IP地址就好比是一个单位的电话号码，而端口号则好比是某一部电
	  话的分机号。通过电话号码找到某一个单位，而通过分机号则可以找到具体的个人；这就类似于通过IP
	  地址可以定位某一台电脑，而通过端口号可以找到电脑中某一个的进程。值得注意的是，在一台主机中，
	  每个进程端口号上只能绑定唯一的一个进程。
	 
	TCP编程:
	TCP编程要用到的两个类：java.net.ServerSocket 和 java.net.Socket。
	
	//首先，从服务器端开始。在服务器端首先要做的是创建一个ServerSocket类型的对象
	//创建ServerSockert对象ss，并把ss绑定到9000端口，IP地址是电脑当前地址
	ServerSocket ss = new ServerSocket(9000); 
	
	//创建完ServerSocket对象ss之后，下一步就该调用ServerSocket类的accept方法
	//这个方法返回一个Socket对象，这个方法的目的在于等待连接。如果没有一个客户端连接过来的话，则这个accept方法会一直不会返回
	//返回的Socket对象，我们可以比喻为一部电话机，很显然，通过一个电话号码和一个分机号，可以唯一的找到一台电话机
	public Socket accept() throws IOException
	
	//那么客户端怎么连接到服务器上呢？可以在客户端创建一个Socket对象连接服务器
	//在创建Socket的时候，给出服务器IP地址和端口号，这样就创建了一个Socket对象并连接服务器
	//此时客户端和服务器都有一个Socket对象，并保持连通，这就意味着两点已经连接了，可以进行数据交互了
	Socket s = new Socket("150.236.56.101", 9000); 
	
	
	
	
## UDP协议

	与TCP协议相比UDP协议是一个无连接，不可靠的协议。即，数据的收发方只负责将数据发出去，数据的接收方只负责接收数据，
	数据的收发双方不会相互确认数据的传输是否成功。使用UDP通信有点类似于写信，当我们寄信的时候，不需要想打电话一样事
	先准备一个连接，寄信人只知道把信寄了出去，但是对方有没有收到信，寄信人则一无所知。相对于TCP而言，UDP有一个优点：
	效率较高。因此，当我们在对数据传输的正确率不太关心，但是对传输效率要求较高的情况下，可以采用UDP协议。典型的使用
	UDP协议的是网络语音以及视频聊天应用。
	UDP编程所要用到的两个主要的类：DatagramSocket和DatagramPacket。我们可以把进行UDP通信比作收发传真。其中，
	DatagramSocket可以当做是一台传真机，传真机既可以发传真，又可以收传真。而DatagramPacket则是需要传输的数据。
	
	//客户端要发送数据，得先创建一个DatagramSocket，代码如下：
	//没有指定客户端的端口，系统会自动为客户端分配一个随机的端口号。
	//为什么服务器端的端口号不能让系统随机分配呢？因为服务器端的地址和端口号是必须要向外界公布，供客户端去访问的，
	//如果一个网站向外公布：网站地址：xxxxxxxx，网站端口：随机，这样的话让用户究竟怎么访问你的网站？
	//因此，服务器端必须手动指定端口号。
	DatagramSocket socket = new DatagramSocket();
	
	//客户端创建了一个DatagramSocket之后，就可以准备发送的数据了。
	byte[] data = str.getBytes(); //data数组中保存的就是需要发送的数据内容
	
	//然后，应当把data封装到一个DatagramPacket中，代码如下：
	DatagramPacket packet = new DatagramPacket(data, 0, data.length, new InetSocketAddress("150.236.56.101", 9000));
	
	//当一切准备就绪之后，客户端就可以调用socket的send方法，发送packet对象。代码如下：
	//这样，数据就从客户端发送到了服务器。
	socket.send(packet);
	
	
	//接下来，就是服务器如何接收了。
	//先要创建一个DatagramSocket类型的对象，代码如下：
	DatagramSocket socket = new DatagramSocket(9000); 
	
	//在接收数据的时候，同样需要一个DatagramPacket。这个DatagramPacket对象就好比是传真机上的纸，在收传真的时候，
	//需要传真机里放上白纸，然后传真机根据发过来的内容，在白纸上打印出来。当传真接受完毕之后，这张纸上就记录了接受到的内容。
	//我们首先要创建一个空数组，这个数组就好像是白纸。
	byte[] buf = new byte[100];
	
	//然后，根据这张白纸，创建一个DatagramPacket：
	DatagramPacket paper = new DatagramPacket(buf, 0, buf.length);
	
	//创建了paper对象之后，就可以调用socket对象的receive方法接受数据。
	socket.receive(paper);

	//接受到数据之后，可以通过paper对象的下面几个方法获得相关信息：
	//获得发送者的地址。可以理解为获得发送传真的对方的号码，等一会儿回传真的时候，就可以用这个地址。
	paper.getSocketAddress() 
	//获得发送的数据的长度。
	//当两边完成通信之后，应当关闭socket。
	paper.getLength() 
	
	
	
	
	